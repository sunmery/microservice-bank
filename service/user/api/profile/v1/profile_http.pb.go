// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.25.2
// source: profile/v1/profile.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProfileCreateProfile = "/service.user.api.profile.v1.Profile/CreateProfile"

type ProfileHTTPServer interface {
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileReply, error)
}

func RegisterProfileHTTPServer(s *http.Server, srv ProfileHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/profile", _Profile_CreateProfile0_HTTP_Handler(srv))
}

func _Profile_CreateProfile0_HTTP_Handler(srv ProfileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileCreateProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProfile(ctx, req.(*CreateProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProfileReply)
		return ctx.Result(200, reply)
	}
}

type ProfileHTTPClient interface {
	CreateProfile(ctx context.Context, req *CreateProfileRequest, opts ...http.CallOption) (rsp *CreateProfileReply, err error)
}

type ProfileHTTPClientImpl struct {
	cc *http.Client
}

func NewProfileHTTPClient(client *http.Client) ProfileHTTPClient {
	return &ProfileHTTPClientImpl{client}
}

func (c *ProfileHTTPClientImpl) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...http.CallOption) (*CreateProfileReply, error) {
	var out CreateProfileReply
	pattern := "/api/v1/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProfileCreateProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
