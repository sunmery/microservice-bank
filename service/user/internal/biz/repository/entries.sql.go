// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entries.sql

package repository

import (
	"context"
)

const CreateEntry = `-- name: CreateEntry :one
INSERT INTO entries(account_id, amount)
VALUES ($1, $2)
RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `json:"accountId"`
	Amount    int64 `json:"amount"`
}

// CreateEntry
//
//	INSERT INTO entries(account_id, amount)
//	VALUES ($1, $2)
//	RETURNING id, account_id, amount, created_at
func (q *Queries) CreateEntry(ctx context.Context, arg *CreateEntryParams) (*Entry, error) {
	row := q.db.QueryRow(ctx, CreateEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return &i, err
}

const GetEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at
FROM entries
WHERE id = $1
LIMIT 1
`

// GetEntry
//
//	SELECT id, account_id, amount, created_at
//	FROM entries
//	WHERE id = $1
//	LIMIT 1
func (q *Queries) GetEntry(ctx context.Context, id int64) (*Entry, error) {
	row := q.db.QueryRow(ctx, GetEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return &i, err
}

const ListEntries = `-- name: ListEntries :one
SELECT id, account_id, amount, created_at
FROM entries
WHERE account_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListEntriesParams struct {
	AccountID int64 `json:"accountId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

// ListEntries
//
//	SELECT id, account_id, amount, created_at
//	FROM entries
//	WHERE account_id = $1
//	ORDER BY id
//	LIMIT $2 OFFSET $3
func (q *Queries) ListEntries(ctx context.Context, arg *ListEntriesParams) (*Entry, error) {
	row := q.db.QueryRow(ctx, ListEntries, arg.AccountID, arg.Limit, arg.Offset)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return &i, err
}
